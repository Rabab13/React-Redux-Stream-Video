{"ast":null,"code":"import _ from 'lodash';\nimport jsonPlaceholder from '../api/jsonPlaceholder'; //in this case with redux we can't use async await syntax without a MIDDLEWARE LIKE THUNK because action creator need to return js plain object but async will return a request object so we need to use a MIDDLEWARE like thunk with redux \n//fetch unique id\n\nexport const fetchUsersAndPosts = () => async (dispatch, getState) => {\n  await dispatch(fetchPosts());\n\n  _.chain(getState);\n\n  const userIds = _.uniq(_.map(getState().posts, \"userId\"));\n\n  userIds.forEach(id => dispatch(fetchUsers(id)));\n}; // fetch posts from jsonPlaceholder\n\nexport const fetchPosts = () => async dispatch => {\n  const response = await jsonPlaceholder.get('./posts');\n  dispatch({\n    type: 'FETCH_POSTS',\n    payload: response.data\n  });\n}; //Action creator func for fetch users from jsonPlaceholder\n\nexport const fetchUsers = id => async dispatch => _fetchUsers(id, dispatch); //memoizing out action creator function to avoid dons and repeating of data rendering\n\nconst _fetchUsers = _.memoize(async (id, dispatch) => {\n  const response = await jsonPlaceholder.get(`/users/${id}`);\n  dispatch({\n    type: 'FETCH_USERS',\n    payload: response.data\n  });\n});","map":{"version":3,"names":["_","jsonPlaceholder","fetchUsersAndPosts","dispatch","getState","fetchPosts","chain","userIds","uniq","map","posts","forEach","id","fetchUsers","response","get","type","payload","data","_fetchUsers","memoize"],"sources":["/home/hr/1 UDACITY Courses/5 React/UDEMY REACT/Redux-thunk-async-blog-posts/src/actions/index.js"],"sourcesContent":["import _ from 'lodash';\nimport jsonPlaceholder from '../api/jsonPlaceholder'\n\n//in this case with redux we can't use async await syntax without a MIDDLEWARE LIKE THUNK because action creator need to return js plain object but async will return a request object so we need to use a MIDDLEWARE like thunk with redux \n\n//fetch unique id\nexport const fetchUsersAndPosts = () => async  (dispatch, getState) =>{\n    await dispatch(fetchPosts());\n\n    _.chain(getState)\n    const userIds = _.uniq(_.map(getState().posts, \"userId\"))\n    userIds.forEach(id =>dispatch(fetchUsers(id)))\n}\n\n// fetch posts from jsonPlaceholder\nexport const fetchPosts =  () => async  dispatch => {\n        const response = await jsonPlaceholder.get('./posts')\n        dispatch ({\n            type: 'FETCH_POSTS',\n            payload: response.data\n        })\n    }\n\n//Action creator func for fetch users from jsonPlaceholder\nexport const fetchUsers =  (id) => async  dispatch => \n    _fetchUsers(id, dispatch);\n    \n//memoizing out action creator function to avoid dons and repeating of data rendering\nconst _fetchUsers = _.memoize(async (id, dispatch) => {\n    const response = await jsonPlaceholder.get(`/users/${id}`)\n    dispatch ({\n        type: 'FETCH_USERS',\n        payload: response.data\n    })\n})"],"mappings":"AAAA,OAAOA,CAAP,MAAc,QAAd;AACA,OAAOC,eAAP,MAA4B,wBAA5B,C,CAEA;AAEA;;AACA,OAAO,MAAMC,kBAAkB,GAAG,MAAM,OAAQC,QAAR,EAAkBC,QAAlB,KAA8B;EAClE,MAAMD,QAAQ,CAACE,UAAU,EAAX,CAAd;;EAEAL,CAAC,CAACM,KAAF,CAAQF,QAAR;;EACA,MAAMG,OAAO,GAAGP,CAAC,CAACQ,IAAF,CAAOR,CAAC,CAACS,GAAF,CAAML,QAAQ,GAAGM,KAAjB,EAAwB,QAAxB,CAAP,CAAhB;;EACAH,OAAO,CAACI,OAAR,CAAgBC,EAAE,IAAGT,QAAQ,CAACU,UAAU,CAACD,EAAD,CAAX,CAA7B;AACH,CANM,C,CAQP;;AACA,OAAO,MAAMP,UAAU,GAAI,MAAM,MAAOF,QAAP,IAAmB;EAC5C,MAAMW,QAAQ,GAAG,MAAMb,eAAe,CAACc,GAAhB,CAAoB,SAApB,CAAvB;EACAZ,QAAQ,CAAE;IACNa,IAAI,EAAE,aADA;IAENC,OAAO,EAAEH,QAAQ,CAACI;EAFZ,CAAF,CAAR;AAIH,CANE,C,CAQP;;AACA,OAAO,MAAML,UAAU,GAAKD,EAAD,IAAQ,MAAOT,QAAP,IAC/BgB,WAAW,CAACP,EAAD,EAAKT,QAAL,CADR,C,CAGP;;AACA,MAAMgB,WAAW,GAAGnB,CAAC,CAACoB,OAAF,CAAU,OAAOR,EAAP,EAAWT,QAAX,KAAwB;EAClD,MAAMW,QAAQ,GAAG,MAAMb,eAAe,CAACc,GAAhB,CAAqB,UAASH,EAAG,EAAjC,CAAvB;EACAT,QAAQ,CAAE;IACNa,IAAI,EAAE,aADA;IAENC,OAAO,EAAEH,QAAQ,CAACI;EAFZ,CAAF,CAAR;AAIH,CANmB,CAApB"},"metadata":{},"sourceType":"module"}